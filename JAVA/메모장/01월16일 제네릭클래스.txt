제네릭 타입이란?
=> 타입을 파라메터화 해서 컴파일시 구체적 타입이 결정되도록하는것
=> 쓰레드, 컬렉션, 람다식(함수적 인터페이스), 스트림, NIo에서 널리 사용됨.
=>제네릭을 모르면 API 도큐먼트 해석할 수 없다.(매우중요)
class ArrayList<E> => 꺽새안에 E는 Element의 약자이다.(인스턴스화 한)

------------------------------------------
Class ArrayList<E>
default Biconsumer<T,U> andThen (Bicnonsumer<?super T,? super U> after
------------------------------------------

<<<제네릭을 사용하므로 얻는 이점>>>
1) 컴파일시 강한 타입 체크 가능
    =>컴파일시에 미리 타입을 강하게 체크하여 에러를 사전에 방지한다.
    

********************
타입캐스팅이 수많은 데이터를 가지고 공정의 데이터를 분석 및 도식화 작업에서
Arraylist와 같은 collection에서는 수많은 객체들을 생성 및 저장해야한다.
********************

<<제한된 타입 파라메터>>
익상수하 => 익스텐즈, 상속, 수퍼, 하위클래스

<<와일드카드 타입 ?>>
=>?가 나오면 아무거나 다들어가도 된다.(클래스 타입이라면)
