<<<익명구현객체(무명 클래스) - anonymous class>>>
=> 명시적인 구현 클래스 작성 생략하고 바로 구현 객체를 얻는 방법
   (인터페이스는 생성자가 없기 때문에 인터페이스의 생성자를 호출하는것이 아님)
   (중괄호 내부에 인터페이스안의 추상메서드를 OVerriding하는것을 말함)

인터페이스 변수 = new 인터페이스(){(인터페이스에 선언된 추상메서드 구현)};

인터페이스 변수로 접근 불가(근본에 없기 때문이다.)

------------------------------------------------------------------------
<<<람다식>>>
인터페이스 내부에 추상메서드가 1개인 경우 => 함수적인터페이스
=> 람다식
(함수적인페이스와 같은경우 익명구현 객체로 사용하지만,
 람다식으로 사용하면 더욱 짧고 간결한 코드로 사용할수 있다.)

ex) Action action1 = () ->
			   {System.out.println("람다식 사용");}
    
    action1.work();

-----------------------------------------------------------------------
내부(중첩)클래스 => (inner(nested)class)란?
=> 두개이상의 클래스가 상당한 연관성을 가질때 사용함

장점!
1) 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근 가능
2) 코드의 복잡성을 줄임(캡슐화)


외부클래스가 생성되어야, 내부클래스를 사용가능
#### static은 인스턴스 생성없이도 접근 가능하므로,
     인스턴스 멤버클래스에는 멤버변수나 메서드로 선언이 불가함
     
 ex)로컬 클래스 사용하는 경우는 빈번하다.
    

스레드=> 프로세스보다 작은 단위
